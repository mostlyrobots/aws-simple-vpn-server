AWSTemplateFormatVersion: '2010-09-09'
Description: StrongSwan VPN Server with Let's Encrypt

Parameters:
  VPNDomain:
    Type: String
    Description: Domain name for VPN server (must point to this server's IP)
    Default: vpn.yourdomain.com
  
  Email:
    Type: String
    Description: Email for Let's Encrypt notifications
    Default: admin@yourdomain.com
  
  VPNUsername:
    Type: String
    Description: VPN username for authentication
    Default: vpnuser
  
  VPNPassword:
    Type: String
    Description: VPN password for authentication
    NoEcho: true
    Default: changeme
  
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VPN-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPN-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: VPN-PublicSubnet

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: VPN-RouteTable

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPN Server Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Let's Encrypt TLS-ALPN-01
        - IpProtocol: udp
          FromPort: 500
          ToPort: 500
          CidrIp: 0.0.0.0/0
          Description: IKEv2
        - IpProtocol: udp
          FromPort: 4500
          ToPort: 4500
          CidrIp: 0.0.0.0/0
          Description: IKEv2 NAT-T
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: VPN-SecurityGroup

  VPNServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}'
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref PublicSubnet
      SourceDestCheck: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          cd /root
          
          # Create config file
          cat > CONFIG.rc << 'EOFCONFIG'
          VPN_DOMAIN="${VPNDomain}"
          EMAIL="${Email}"
          VPN_USERNAME="${VPNUsername}"
          VPN_PASSWORD="${VPNPassword}"
          EOFCONFIG
          
          # Create setup-strongswan.sh
          cat > setup-strongswan.sh << 'EOFSTRONGSWAN'
          #!/bin/bash
          set -e
          
          if [ ! -f "CONFIG.rc" ]; then
              echo "ERROR: CONFIG.rc not found"
              exit 1
          fi
          source CONFIG.rc
          
          dnf install -y strongswan
          
          cat > /etc/ipsec.conf << EOF
          config setup
              charondebug="ike 1, knl 1, cfg 0"
              uniqueids=no
          
          conn ikev2-vpn
              auto=add
              compress=no
              type=tunnel
              keyexchange=ikev2
              fragmentation=yes
              forceencaps=yes
              
              leftcert=fullchain.pem
              leftid=@${!VPN_DOMAIN}
              leftsendcert=always
              leftsubnet=0.0.0.0/0
              
              right=%any
              rightid=%any
              rightauth=eap-mschapv2
              rightsourceip=10.10.10.0/24
              rightdns=8.8.8.8,8.8.4.4
              
              ike=aes256-sha256-modp2048,aes256-sha1-modp2048!
              esp=aes256-sha256,aes256-sha1!
              
              eap_identity=%identity
          EOF
          
          cat > /etc/ipsec.secrets << EOF
          : RSA privkey.pem
          
          ${!VPN_USERNAME} : EAP "${!VPN_PASSWORD}"
          EOF
          chmod 600 /etc/ipsec.secrets
          
          cat > /etc/sysctl.d/99-vpn.conf << EOF
          net.ipv4.ip_forward = 1
          net.ipv4.conf.all.accept_redirects = 0
          net.ipv4.conf.all.send_redirects = 0
          EOF
          sysctl -p /etc/sysctl.d/99-vpn.conf
          
          iptables -t nat -A POSTROUTING -s 10.10.10.0/24 -o eth0 -j MASQUERADE
          iptables -A FORWARD -s 10.10.10.0/24 -j ACCEPT
          iptables -A FORWARD -d 10.10.10.0/24 -j ACCEPT
          iptables-save > /etc/sysconfig/iptables
          
          systemctl enable strongswan
          systemctl restart strongswan
          
          echo "StrongSwan configured"
          EOFSTRONGSWAN
          
          # Create setup-letsencrypt.sh
          cat > setup-letsencrypt.sh << 'EOFLETSENCRYPT'
          #!/bin/bash
          set -e
          
          if [ ! -f "CONFIG.rc" ]; then
              echo "ERROR: CONFIG.rc not found"
              exit 1
          fi
          source CONFIG.rc
          
          dnf install -y certbot
          
          cat > /usr/local/bin/certbot-pre-hook.sh << 'EOF'
          #!/bin/bash
          iptables -I INPUT 1 -p tcp --dport 443 -j ACCEPT
          EOF
          chmod +x /usr/local/bin/certbot-pre-hook.sh
          
          cat > /usr/local/bin/certbot-post-hook.sh << 'EOF'
          #!/bin/bash
          iptables -D INPUT -p tcp --dport 443 -j ACCEPT
          cp /etc/letsencrypt/live/*/fullchain.pem /etc/ipsec.d/certs/
          cp /etc/letsencrypt/live/*/privkey.pem /etc/ipsec.d/private/
          chmod 600 /etc/ipsec.d/private/privkey.pem
          ipsec reload
          EOF
          chmod +x /usr/local/bin/certbot-post-hook.sh
          
          certbot certonly --standalone \
              --preferred-challenges tls-alpn-01 \
              -d "$VPN_DOMAIN" \
              --email "$EMAIL" \
              --agree-tos \
              --non-interactive \
              --pre-hook "/usr/local/bin/certbot-pre-hook.sh" \
              --post-hook "/usr/local/bin/certbot-post-hook.sh"
          
          (crontab -l 2>/dev/null | grep -v certbot-renew; echo "0 3 */45 * * certbot renew --quiet --pre-hook '/usr/local/bin/certbot-pre-hook.sh' --post-hook '/usr/local/bin/certbot-post-hook.sh'"; echo "@reboot sleep 60 && certbot renew --quiet --pre-hook '/usr/local/bin/certbot-pre-hook.sh' --post-hook '/usr/local/bin/certbot-post-hook.sh'") | crontab -
          
          echo "Let's Encrypt configured"
          EOFLETSENCRYPT
          
          chmod +x setup-strongswan.sh setup-letsencrypt.sh
          
          # Run setup
          bash setup-strongswan.sh
          bash setup-letsencrypt.sh
      Tags:
        - Key: Name
          Value: VPN-Server

Outputs:
  ServerPublicIP:
    Description: VPN Server Public IP
    Value: !GetAtt VPNServer.PublicIp
  
  ServerDNS:
    Description: Point your domain to this IP
    Value: !GetAtt VPNServer.PublicIp
  
  VPNDomain:
    Description: VPN Domain Name
    Value: !Ref VPNDomain
  
  VPNUsername:
    Description: VPN Username
    Value: !Ref VPNUsername
